#!/usr/bin/env ruby

require 'graphshaper'
require 'optparse'

start_time = Time.now

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: graphshaper [options] size"
  
  opts.on("-a", "--arango", "Store the graph in a local ArangoDB instance") do |arango|
    options[:arango] = arango
  end
  
  opts.on("-l", "--log", "Store the graph in two CSV files for nodes and edges") do |log|
    options[:log] = log
  end
  
  opts.on("-d", "--dot", "Store the graph in the dot format") do |dot|
    options[:dot] = dot
  end
  
  opts.on("-s", "--sql", "Store the graph in sql format") do |sql|
    options[:sql] = sql
  end
  
  opts.on("-p", "--png", "Export the graph as a PNG (graphviz must be installed)") do |png|
    options[:dot] = png
    options[:png] = png
  end
  
  opts.on("-t", "--testdata", "Generate Test Data (for shortestpath)") do |sp|
    options[:t] = sp
  end
  
  opts.on_tail("--version", "Show version") do
    puts Graphshaper::VERSION
    exit
  end
  
  opts.parse!
end

if ARGV.length == 0
  puts "Please enter a size for your graph."
  exit
end

# check for installed components: graphviz
if options[:png] and `which circo` == ""
  puts "graphviz is not installed, can't export to png. Please install graphviz or run without --png option."
  exit
end

# check for running component: ArangoDB
if options[:arango]
  begin
    HTTParty.get 'http://localhost:8529'
  rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
    puts "No ArangoDB instance is running on port 8529. Please start ArangoDB or run without --arango option."
    exit
  end
end

adapters = []
  
if options[:log]
  generated_vertices_csv_file = File.new("generated_vertices.csv", "w")
  generated_edges_csv_file = File.new("generated_edges.csv", "w")
  adapters << Graphshaper::LoggingAdapter.new(generated_vertices_csv_file, generated_edges_csv_file)
end

if options[:arango]
  adapters << Graphshaper::ArangoDbAdapter.new("vertices", "edges")
end

if options[:dot]
  generated_graph_dot_file = File.new("generated_graph.dot", "w")
  adapters << Graphshaper::DotAdapter.new(generated_graph_dot_file)
end

if options[:sql]
  generated_graph_sql_file = File.new("generated_graph.sql", "w")
  generated_vertices_sql_file = File.new("generated_vertices.sql", "w")
  generated_edges_sql_file = File.new("generated_edges.sql", "w")
  
  adapters << Graphshaper::SqlAdapter.new(generated_graph_sql_file, generated_vertices_sql_file, generated_edges_sql_file)
end

number_of_vertices = ARGV.first.to_i
inner_vertices = 20
outer_vertices = number_of_vertices - inner_vertices

graph = Graphshaper::UndirectedGraph.new inner_vertices, adapters: adapters

graph.connect_all_vertices

outer_vertices.times do
  graph.add_vertex { |preferential_attachment| preferential_attachment > rand }
end

adapters.each { |adapter| adapter.close }

if options[:t]
  generated_test_cases_for_shortest_path = File.new("generated_testcases.csv", "w")
  generated_test_cases_for_shortest_path << "from_id,to_id\n"
  inner_vertices.times do |inner_vertex_id|
    rand(10).times do
      to_node = rand(number_of_vertices)
      generated_test_cases_for_shortest_path << "#{inner_vertex_id},#{to_node}\n"
    end
  end
end

print "#{graph.order} vertices and #{graph.size} edges generated"

print " and saved into ArangoDB" if options[:arango]
print " and logged" if options[:log]
print " and generated as a dot" if options[:dot]
print " and saved in sql format" if options[:sql]
print " and generated test cases" if options[:t]

if options[:png]
  system('circo -Tpng generated_graph.dot -o generated_graph.png')
end

ellapsed_time = Time.now - start_time

if ellapsed_time < 2
  puts " in about one second"
elsif ellapsed_time < 60
  puts " in about #{ellapsed_time.round} seconds"
else
  puts " in about #{ellapsed_time.round / 60} minutes and #{ellapsed_time.round % 60} seconds"
end